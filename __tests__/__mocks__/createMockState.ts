import type { InternalState } from "../../src/types";

export function createMockState(
    overrides: Partial<Omit<InternalState, "props"> & { props: Partial<InternalState["props"]> }> = {},
): InternalState {
    return {
        // Required by UpdateItemPositions
        averageSizes: {},
        // Core calculateItemsInView properties
        columns: new Map(),
        containerItemKeys: new Set(),
        containerItemTypes: new Map(),
        dataChangeNeedsScrollUpdate: false,
        enableScrollForNextCalculateItemsInView: true,
        // Required by Pick types from dependencies
        endBuffered: 0,
        endNoBuffer: 0,
        endReachedBlockedByTimer: false,
        firstFullyOnScreenIndex: 0,
        idCache: [],
        idsInView: [],
        ignoreScrollFromMVCP: undefined,
        ignoreScrollFromMVCPTimeout: undefined,
        indexByKey: new Map(),
        initialScroll: undefined,
        isAtEnd: false,
        isAtStart: false,
        isEndReached: false,
        isStartReached: false,
        lastBatchingAction: 0,
        lastLayout: undefined,
        // Required by CheckAtBottom and SetDidLayout
        loadStartTime: Date.now(),
        maintainingScrollAtEnd: false,
        minIndexSizeChanged: undefined,
        nativeMarginTop: 0,
        needsOtherAxisSize: false,
        otherAxisSize: undefined,
        positions: new Map(),
        queuedCalculateItemsInView: undefined,
        queuedInitialLayout: false,
        refScroller: undefined as any,
        scroll: 0,
        scrollAdjustHandler: {
            requestAdjust: () => {}, // Mock scroll adjust handler
        },
        scrollForNextCalculateItemsInView: undefined,
        scrollHistory: [],
        // Required by PrepareMVCP
        scrollingTo: undefined,
        scrollLength: 300,
        scrollPending: 0,
        scrollPrev: 0,
        scrollPrevTime: 0,
        scrollTime: 0,
        sizes: new Map(),
        sizesKnown: new Map(),
        startBuffered: 0,
        startBufferedId: undefined,
        startNoBuffer: 0,
        startReachedBlockedByTimer: false,
        // Sticky container setup (empty by default)
        stickyContainerPool: new Set(),
        stickyContainers: new Map(),
        timeoutSetPaddingTop: undefined,
        timeoutSizeMessage: undefined,
        timeouts: new Set(),
        totalSize: 1000,
        viewabilityConfigCallbackPairs: undefined,
        ...overrides,
        props: {
            alignItemsAtEnd: false,
            data: [],
            enableAverages: true,
            estimatedItemSize: undefined,
            getEstimatedItemSize: undefined,
            getFixedItemSize: undefined,
            getItemType: undefined,
            horizontal: false,
            initialContainerPoolRatio: 2,
            initialScroll: undefined,
            itemsAreEqual: undefined,
            keyExtractor: (_: any, index: number) => `item_${index}`,
            maintainScrollAtEnd: false,
            maintainScrollAtEndThreshold: 0.1,
            maintainVisibleContentPosition: false,
            numColumns: 1,
            onEndReached: undefined,
            onEndReachedThreshold: 0.1,
            onItemSizeChanged: undefined,
            onLoad: undefined,
            onScroll: undefined,
            onStartReached: undefined,
            onStartReachedThreshold: 0.1,
            recycleItems: false,
            renderItem: undefined,
            scrollBuffer: 100,
            snapToIndices: undefined,
            stickyIndicesArr: [],
            // Provide empty sticky indices for tests by default
            stickyIndicesSet: new Set<number>(),
            stylePaddingBottom: undefined,
            stylePaddingTop: 0,
            suggestEstimatedItemSize: false,
            ...(overrides.props ?? {}),
        },
    } as unknown as InternalState;
}
